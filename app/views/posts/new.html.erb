<% content_for :head do %>
  <script src="https://unpkg.com/babel-polyfill@6.26.0/dist/polyfill.min.js"></script>
  <script src="https://unpkg.com/whatwg-fetch@2.0.3/fetch.js"></script>
  <script src="https://transloadit.edgly.net/releases/uppy/v0.28.0/dist/uppy.min.js"></script>
<% end %>
<div class="row">
  <%= render 'pages/sidebar' %>
  <div class="page-admin">
    <% unless @page.externally_hosted %>
      <h2>Create Post</h2>
      <%= form_with model: @post, url: page_posts_path(@page, @post), method: 'post', html: { class: 'needs-validation', novalidate: true } do |form| %>
        <div class="form-group required">
          <%= form.label 'postable_attributes[title]', 'Title', class: 'control-label' %>
          <%= form.text_field 'postable_attributes[title]', autofocus: true, required: true, class: 'form-control edit-post-title', onblur: 'onTitleBlur()'%>
          <div class="slug-container">
            <span id="slug"></span>
          </div>
        </div>
        <div id="audio">
        </div>
        <div class="file-input-container">
          <%= form.hidden_field 'attachment[label]', required: true, value: 'podcast_episode' %>
          <%= form.hidden_field 'attachment[file]', class: 'upload-hidden', required: true %>
          <%= form.file_field 'attachment[file]', class: 'upload-file', accept: 'audio/mp3,audio/*;capture=microphone', style: 'display: none;' %>
        </div>
        <div class="form-group required hidden" style="display: none;">
          <%= form.rich_text_area 'postable_attributes[content]' %>
        </div>
        <div class="form-group required hidden" style="display: none;">
          <%= form.hidden_field :slug, required: true, class: 'form-control' %>
        </div>
        <div class="form-group required hidden" style="display: none;">
          <%= form.label :publish_time, 'Publish Time', class: 'control-label' %> <em><span id="timezone"></span></em>
          <br />
          <%= form.select :publish_time_month, [['01–Jan', 'January'], ['02–Feb', 'February'], ['03–Mar', 'March'], ['04–Apr', 'April'], ['05–May', 'May'], ['06–Jun', 'June'], ['07–Jul', 'July'], ['08–Aug', 'August'], ['09–Sep', 'September'], ['10–Oct', 'October'], ['11–Nov', 'November'], ['12–Dec', 'December'],], {}, { :class => 'form-control publish-time month' } %>
          <%= form.text_field :publish_time_day, min: 1, max: 31, required: true, class: 'form-control publish-time day' %>,
          <%= form.text_field :publish_time_year, min: 1, required: true, class: 'form-control publish-time year' %> at
          <%= form.text_field :publish_time_hour, min: 0, max: 24, required: true, class: 'form-control publish-time hour' %> :
          <%= form.text_field :publish_time_minute, min: 1, max: 59, required: true, class: 'form-control publish-time minute' %>
          <%= form.hidden_field :publish_time_zone, value: nil %>
        </div>
        <%= form.submit 'Create', class: 'btn btn-primary hidden', style: 'display: none;', disabled: 'disabled', id: 'post-save' %>
      <% end %>
    <% else %>
      <h2>Create Post</h2>
      <p>
        <em style="color:#9a2001;">This podcast is hosted outside of MTGCast</em>
      </p>
      <p>
        You cannot upload new episodes to an externally hosted podcast. Instead, MTGCast will check your current RSS feed for any new episodes and import them.
      </p>
    <% end %>
  </div>
</div>
<script>
  function fileUpload(fileInput) {
    var saveButton = document.getElementById('post-save')

    fileInput.style.display = 'none' // uppy will add its own file input

    uppy = Uppy.Core({
        id: fileInput.id,
        autoProceed: true,
        restrictions: {
          maxFileSize: (1000*1024*1024),
          maxNumberOfFiles: 1,
          minNumberOfFiles: 1,
          allowedFileTypes: ['audio/wav', 'audio/mpeg', 'audio/mp3', 'audio/mp4', 'audio/aac', 'audio/aacp']
        }
      })
      .use(Uppy.FileInput, {
        target: fileInput.parentNode,
        pretty: true,
        locale: {
          strings: {
            chooseFiles: 'Select File'
          }
        }
      })
      .use(Uppy.Informer, {
        target: fileInput.parentNode,
      })
      .use(Uppy.ProgressBar, {
        target: fileInput.parentNode,
      })

    uppy.use(Uppy.AwsS3Multipart, {
      serverUrl: '/', // will call Shrine's presign endpoint on `/s3/params`
    })

    uppy.on('file-added', (file) => {
      $('trix-editor').height(window.innerHeight * 0.9)
      $('.hidden').show();

      var fileUploadPercentage = document.querySelector('.uppy-ProgressBar-percentage');
      fileUploadPercentage.style.display = 'block';

      var fileUploadButton = document.querySelector('.uppy-FileInput-btn');
      fileUploadButton.style.display = 'none';
    })



    uppy.on('upload-success', function (file, data, uploadURL) {
      saveButton.disabled = false;

      var fileUploadButton = document.querySelector('.uppy-FileInput-btn');
      fileUploadButton.innerHTML = 'File Uploaded';

      // fileUploadButton.disabled = true

      var fileUploadContainer = document.querySelector('.uppy-FileInput-container');

      var fileInputContainer = document.querySelector('.file-input-container');

      var fileUploadPercentage = document.querySelector('.uppy-ProgressBar-percentage');
      fileUploadPercentage.style.display = 'none';

      var fileNameParagraph = document.createElement('div');
      fileNameParagraph.innerHTML = '<p><strong>Audio file:</strong> <em>' + file.name + '</em></div>'

      fileUploadContainer.style.display = 'none'
      fileInputContainer.append(fileNameParagraph)

      var audio = document.getElementById('audio').innerHTML = '<audio id="audio-player" controls="controls" preload="auto" src="' + uploadURL + '" type="audio/mpeg">';

      // construct uploaded file data in the format that Shrine expects
      var uploadedFileData = JSON.stringify({
        id: uploadURL.match(/\/cache\/([^\?]+)/)[1], // extract key without prefix
        storage: 'cache',
        metadata: {
          size:      file.size,
          filename:  file.name,
          mime_type: file.type
        }
      })

      // set hidden field value to the uploaded file data so that it's submitted with the form as the attachment
      var hiddenInput = fileInput.parentNode.querySelector('.upload-hidden')
      hiddenInput.value = uploadedFileData
    })

    return uppy
  }

  var uppyAvailable = false;
  function uppySetup() {
    if (typeof Uppy !== "undefined" && uppyAvailable === false) {
      uppyAvailable = true;
      document.querySelectorAll('.upload-file').forEach(function (fileInput) {
        fileUpload(fileInput)
      })
    } else {
      setTimeout(uppySetup, 250);
    }
  }

  function onTitleBlur() {
    var slugInput = $('input[name="post[slug]"]')[0];
    var slugDisplay = $('#slug')[0];
    var postTitle = $('input[name="post[postable_attributes[title]]"]')[0];
    var parameterizedPostTitle = postTitle.value.toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/(^-|-$)/g,'');
    var siteAndPostSlug = "https://www.mtgcast.com/podcasts/<%= @post.page.slug %>/"

    slugInput.value =  parameterizedPostTitle + "-<%= SecureRandom.hex(5) %>";
    slugDisplay.innerHTML = siteAndPostSlug + slugInput.value;
  }

  function setTime() {
    // var tzoffset = (new Date()).getTimezoneOffset() * 60000;
    var date = new Date,
        month = date.toLocaleString('default', { month: 'long' }),
        day = String(date.getDate()).padStart(2, '0'),
        year = date.getFullYear(),
        hour = String(date.getHours()).padStart(2, '0'),
        minute = String(date.getMinutes()).padStart(2, '0'),
        zone = date.getTimezoneOffset() / 60;

    $('select[name="post[publish_time_month]"]').val(month);
    $('input[name="post[publish_time_day]"]').val(day);
    $('input[name="post[publish_time_year]"]').val(year);
    $('input[name="post[publish_time_hour]"]').val(hour);
    $('input[name="post[publish_time_minute]"]').val(minute);
    $('input[name="post[publish_time_zone]"]').val(zone);
  }

  $(document).on('ready turbolinks:load', function() {
    uppySetup();
    setTime();
  })
</script>
