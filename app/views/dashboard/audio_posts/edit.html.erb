<% content_for :head do %>
  <script src="https://unpkg.com/babel-polyfill@6.26.0/dist/polyfill.min.js"></script>
  <script src="https://unpkg.com/whatwg-fetch@2.0.3/fetch.js"></script>
  <script src="https://transloadit.edgly.net/releases/uppy/v0.28.0/dist/uppy.min.js"></script>
<% end %>
<div class="row">
  <%= render 'dashboard/sidebar' %>
  <div class="page-admin">
    <div class="content">
      <h2>Edit Post</h2>
      <div class="admin-post-container">
        <%= form_with model: @post, url: page_dashboard_audio_post_path(@page, @post), method: 'put' do |form| %>
          <%= form.hidden_field :postable_type, value: @post.postable_type %>
          <%= form.fields_for(:postable) do |postable_form| %>
            <div class="form-group required">
              <%= postable_form.label :title, 'Title', class: 'control-label' %>
              <%= postable_form.text_field :title, required: true, class: 'form-control edit-post-title', value: @post.postable.title %>
              <div class="slug-container">
                <span><%= link_to "#{page_post_url(@page, @post)}", page_post_path(@page, @post) %></span>
              </div>
            </div>
            <div>
              <% if @post.postable.podcast_episode %>
                <audio id="player" controls>
                  <source src="<%= @post.postable.podcast_episode&.url %>" type="<%= @post.postable.podcast_episode.file.metadata.dig('mime_type') %>">
                </audio>
                <p id="filename">
                  <em>
                    <%= URI.unescape(@post.postable.podcast_episode.file.metadata['filename']) %>
                    <% unless @post.postable.podcast_episode.file.data['storage'] == 'external' %>
                      <span id="remove-audio"><%= render 'shared/icons/file_x', color: 'delete', size: '1.5rem' %></span>
                    <% else %>
                      (Externally hosted)
                    <% end %>
                  </em>
                </p>
                <div id="audio">
                </div>
                <div class="file-input-container" style="display: none;">
                  <%= form.hidden_field 'attachment[label]', required: true, value: 'podcast_episode' %>
                  <%= form.hidden_field 'attachment[file]', class: 'upload-hidden', required: true %>
                  <%= form.file_field 'attachment[file]', class: 'upload-file', accept: 'audio/mp3,audio/*;capture=microphone', style: 'display: none;' %>
                </div>
              <% else %>
                <p id="no-audio-warning">
                  <%= render 'shared/icons/exclamation_circle', color: 'red', size: '1.5rem' %>
                  <em><strong>This episode has no audio file attached.</strong></em>
                </p>
                <div id="audio">
                </div>
                <div class="file-input-container">
                  <%= form.hidden_field 'attachment[label]', required: true, value: 'podcast_episode' %>
                  <%= form.hidden_field 'attachment[file]', class: 'upload-hidden', required: true %>
                  <%= form.file_field 'attachment[file]', class: 'upload-file', accept: 'audio/mp3,audio/*;capture=microphone', style: 'display: none;' %>
                </div>
              <% end %>
            </div>
            <div class="form-group required">
              <%= postable_form.hidden_field :id, value: @post.postable.id %>
              <%= postable_form.rich_text_area :content, class: 'full-height' %>
            </div>
            <div class="form-group required">
              <%= form.label :publish_time, 'Publish Time', class: 'control-label' %> <em><span id="timezone"></span></em>
              <br />
              <%= form.select :publish_time_month, options_for_select([['01–Jan', 'January'], ['02–Feb', 'February'], ['03–Mar', 'March'], ['04–Apr', 'April'], ['05–May', 'May'], ['06–Jun', 'June'], ['07–Jul', 'July'], ['08–Aug', 'August'], ['09–Sep', 'September'], ['10–Oct', 'October'], ['11–Nov', 'November'], ['12–Dec', 'December']]), {}, { class: 'form-control publish-time month' } %>
              <%= form.text_field :publish_time_day, min: 1, max: 31, required: true, class: 'form-control publish-time day' %>,
              <%= form.text_field :publish_time_year, min: 1, required: true, class: 'form-control publish-time year' %> at
              <%= form.text_field :publish_time_hour, min: 0, max: 24, required: true, class: 'form-control publish-time hour' %> :
              <%= form.text_field :publish_time_minute, min: 1, max: 59, required: true, class: 'form-control publish-time minute' %>
              <%= form.hidden_field :publish_time_zone, value: nil %>
            </div>
          <% end %>
          <div class="actions">
            <%= form.submit 'Save', class: 'btn btn-primary', id: 'post-save' %>
            <%= link_to 'Delete Post', page_dashboard_audio_post_path(@page, @post), class: 'btn btn-danger btn-delete',  method: "delete", data: { confirm: "Are you sure you want to delete this post?" } %>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
  function fileUpload(fileInput) {
    var saveButton = document.getElementById('post-save'),
        noAudioWarning = document.getElementById('no-audio-warning');

    fileInput.style.display = 'none' // uppy will add its own file input

    uppy = Uppy.Core({
        id: fileInput.id,
        autoProceed: true,
        restrictions: {
          maxFileSize: (1000*1024*1024),
          maxNumberOfFiles: 1,
          minNumberOfFiles: 1,
          allowedFileTypes: ['audio/wav', 'audio/mpeg', 'audio/mp3', 'audio/mp4', 'audio/aac', 'audio/aacp']
        }
      })
      .use(Uppy.FileInput, {
        target: fileInput.parentNode,
        pretty: true,
        locale: {
          strings: {
            chooseFiles: 'Select File'
          }
        }
      })
      .use(Uppy.Informer, {
        target: fileInput.parentNode,
      })
      .use(Uppy.ProgressBar, {
        target: fileInput.parentNode,
      })

    uppy.use(Uppy.AwsS3Multipart, {
      serverUrl: '/', // will call Shrine's presign endpoint on `/s3/params`
    })

    uppy.on('file-added', (file) => {
      $('trix-editor.full-height').height(window.innerHeight * 0.87)
      $('.hidden').show();

      var fileUploadPercentage = document.querySelector('.uppy-ProgressBar-percentage');
      fileUploadPercentage.style.display = 'block';

      var fileUploadButton = document.querySelector('.uppy-FileInput-btn');
      fileUploadButton.style.display = 'none';
    })



    uppy.on('upload-success', function (file, data, uploadURL) {
      saveButton.disabled = false;
      $(noAudioWarning).hide();

      var fileUploadButton = document.querySelector('.uppy-FileInput-btn');
      fileUploadButton.innerHTML = 'File Uploaded';

      // fileUploadButton.disabled = true

      var fileUploadContainer = document.querySelector('.uppy-FileInput-container');

      var fileInputContainer = document.querySelector('.file-input-container');

      var fileUploadPercentage = document.querySelector('.uppy-ProgressBar-percentage');
      fileUploadPercentage.style.display = 'none';

      var fileNameParagraph = document.createElement('div');
      fileNameParagraph.innerHTML = '<p><strong>Audio file:</strong> <em>' + file.name + '</em></div>'

      fileUploadContainer.style.display = 'none'
      fileInputContainer.append(fileNameParagraph)

      var audio = document.getElementById('audio').innerHTML = '<audio id="audio-player" controls="controls" preload="auto" src="' + uploadURL + '" type="audio/mpeg">';

      // construct uploaded file data in the format that Shrine expects
      var uploadedFileData = JSON.stringify({
        id: uploadURL.match(/\/cache\/([^\?]+)/)[1], // extract key without prefix
        storage: 'cache',
        metadata: {
          size:      file.size,
          filename:  file.name,
          mime_type: file.type
        }
      })

      // set hidden field value to the uploaded file data so that it's submitted with the form as the attachment
      var hiddenInput = fileInput.parentNode.querySelector('.upload-hidden')
      hiddenInput.value = uploadedFileData
    })

    return uppy
  }

  var uppyAvailable = false;
  function uppySetup() {
    if (typeof Uppy !== "undefined" && uppyAvailable === false) {
      uppyAvailable = true;
      document.querySelectorAll('.upload-file').forEach(function (fileInput) {
        fileUpload(fileInput)
      })
    } else {
      setTimeout(uppySetup, 250);
    }
  }

  function removeAudio() {
    var player = document.getElementById('player'),
        filename = document.getElementById('filename'),
        fileInputContainer = document.querySelector('.file-input-container');

    $(player).hide();
    $(filename).hide();
    $(fileInputContainer).show();
  }

  $(document).on('ready turbolinks:load', function() {
    uppySetup();

    $(document.getElementById('remove-audio')).on("click", removeAudio);

    var date = new Date('<%= @post.publish_time.utc.iso8601 %>'),
        month = date.toLocaleString('default', { month: 'long' }),
        day = String(date.getDate()).padStart(2, '0'),
        year = date.getFullYear(),
        hour = String(date.getHours()).padStart(2, '0'),
        minute = String(date.getMinutes()).padStart(2, '0'),
        zone = date.getTimezoneOffset() / 60;

    $('select[name="post[publish_time_month]"]').val(month);
    $('input[name="post[publish_time_day]"]').val(day);
    $('input[name="post[publish_time_year]"]').val(year);
    $('input[name="post[publish_time_hour]"]').val(hour);
    $('input[name="post[publish_time_minute]"]').val(minute);
    $('input[name="post[publish_time_zone]"]').val(zone);
  })
</script>
